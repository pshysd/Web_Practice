package com.kh.member.controller;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.kh.member.model.service.MemberService;
import com.kh.member.model.vo.Member;

/**
 * Servlet implementation class LoginController
 */
@WebServlet("/login.me")
public class LoginController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public LoginController() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

		/*
		 * < HttpServletRequest 객체와 HttpServletResponse 객체 >
		 * - request : 서버로 요청할 때의 정보들이 담겨있음
		 * 			   (요청시 전달값, 요청 전송 방식, 요청자의 ip 주소 등등..)
		 * 			   request.getParameter() / request.getParamterValues() 로 값 뽑기
		 * - response : 요청에 대해 응답할 때 필요한 객체
		 * 				자바 코드로 응답페이지를 만들때 주로 사용
		 * 
		 * < GET 방식과 POST 방식 >
		 * - GET : 사용자가 입력한 값이 url 에 노출 / 데이터의 길이 제한 / 대신 즐겨찾기가 편리
		 * - POST : 사용자가 입력한 값이 url 에 노출 X / 데이터의 길이 제한 X / 대신 즐겨찾기가 불편 / Timeout 이 존재
		 */
		
		// 1) 인코딩 처리해야함 (POST 방식일 경우)
		request.setCharacterEncoding("UTF-8");
		
		// 2) 요청 시 전달값을 꺼내기 (request 의 parameter 영역으로부터)
		// 요청시 전달값을 뽑아서 변수에 담기!!
		// request.getParameter("키값") : String 타입의 밸류값 한개 리턴
		// request.getParameterValues("키값") : String[] 타입의 밸류값 여러개가 묶여서 리턴
		
		// 요청시 전달값
		// userId : 아이디값
		String userId = request.getParameter("userId"); // "user01"
		// userPwd : 비밀번호값
		String userPwd = request.getParameter("userPwd"); // "pass01"
		
		// 주의사항!!
		// 키값을 제시시 오타가 나면 없는 키값을 찾는 꼴이기 때문에 null 이 리턴됨
		
		// System.out.println(userId);
		// System.out.println(userPwd);
		
		// 3) 요청시 전달값들을 VO 객체로 가공하기
		Member m = new Member();
		m.setUserId(userId);
		m.setUserPwd(userPwd);
		
		// 4) 가공한 VO 객체를 해당 요청을 처리하는 서비스 클래스의 메소드로 넘기기 (호출)
		Member loginUser = new MemberService().loginMember(m);
		
		// 5) 처리된 결과를 가지고 사용자가 보게될 응답뷰 지정
		// System.out.println(loginUser);
		
		/*
		 * * 응답 페이지에 전달할 값이 있다면 값을 어딘가에 담아야 함
		 *   (담아줄 수 있는 Servlet Scope 내장객체 4종류)
		 * 1) application : application 객체에 담은 데이터는 웹 애플리케이션 전역에서 다 꺼내 쓸 수 있음
		 * 2) session : session 객체에 담은 데이터는 웹 애플리케이션 전역에서 다 꺼내 쓸 수 있음
		 * 				단, 한번 담은 데이터는 내가 직접 지우기 전까지 쓸 수 있음
		 * 				       한번 담은 데이터는 서버가 멈추기 전까지 쓸 수 있음
		 * 				       한번 담은 데이터는 브라우저가 종료되기 전까지 쓸 수 있음
		 * 3) request : request 객체에 담은 데이터는 해당 요청에 대한 응답 페이지에서만 사용 가능함
		 * 				해당 그 요청을 담당하는 Servlet 과 그 요청에 대한 응답페이지인 jsp 에서 (한세트) 쓸 수 있음
		 * 4) page : 해당 jsp 페이지에서만 데이터를 담고 꺼내 쓸 수 있음
		 * 
		 * => session 과 request 를 주로 많이 쓴다.
		 * 
		 * 공통적으로 데이터를 담고자 한다면 객체명.setAttribute("키", 밸류);
		 * 		      데이터를 꺼내고자 한다면 객체명.getAttribute("키"); : Object 타입의 밸류 리턴
		 * 		      데이터를 지우고자 한다면 객체명.removeAttribute("키"); 
		 */
		
		if(loginUser == null) { // 로그인 실패 => 에러문구를 담아서 에러페이지로 응답
			
		}
		else { // 로그인 성공 => 응답페이지에 loginUser 데이터 전달, 메인페이지로 응답
			
		}
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}

}
