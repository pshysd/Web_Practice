package com.kh.board.controller;

import java.io.IOException;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.kh.board.model.service.BoardService;

/**
 * Servlet implementation class BoardListController
 */
@WebServlet("/list.bo")
public class BoardListController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public BoardListController() {
        super();
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	    
//	    ==== 페이징 처리 ====
//	    총 7개의 변수 필요 -> 기본적으로 알아내야 하는 변수 4개, 계산해서 구해야 하는 변수 3개
	    
	    int listCount; // 현재 총 게시글 갯수
	    int currentPage; // 현재 요청한 페이지 (즉, 사용자가 요청한 페이지 수)
	    int pageLimit; // 페이지 하단에 보여질 페이징 바의 페이지 최대 갯수
	    int boardLimit; // 한 페이지에 보여질 게시글의 최대 갯수 (몇 개 단위씩 리스트가 보여질건지)
	    
	    int maxPage; // 가장 마지막 페이지가 몇 번 페이지인지
	    int startPage; // 페이지 하단에 보여질 페이징 바의 시작 수
	    int endPage; // 페이지 하단에 보여질 페이징 바의 끝 수
	    
//	    * listCount : 총 게시글 갯수 (삭제된건 포함시키면 안됨)
	    listCount = new BoardService().selectListCount();
	    
//	    * currentPage : 현재 페이지 (즉, 사용자가 요청한 페이지)
//	    -> 쿼리스트링으로 대놓고 넘김
	    currentPage = Integer.parseInt(request.getParameter("currentPage"));
	    
//	    * pageLimit : 페이지 하단에 보여질 페이징 바의 페이지 최대 갯수
//	                  (페이지 목록들을 몇 개 단위로 보여질 것인지)
	    pageLimit = 10;
	    
//	    * boardLimit : 한 페이지에 보여질 게시글 (바꾸고 싶으면 자바스크립트로 가능)
	    boardLimit = 10;
	    
//	    * maxPage : 가장 마지막 페이지가 몇 번 페이지인지 (총 페이지 수)
	    
//	    listCount, boardLimit에 영향을 받음
	    
//	    공식 구하기
//	    boardLimit가 10이라는 가정하에 규칙을 구해보자
	    
//	    listCount        boardLimit      maxPage
//	     100.0       /         10.0            10
//	     101.0       /         10.1            11
//	     105.0       /         10.5            11
//	     109.0       /         10.9            11
//	     110.0       /         11.0            11
//	     111.0       /         11.1            12
//	     => 나눗셈 연산한 결과를 올림 처리한다면 ?
	    
//	    1) listCount 값을 double 타입으로 형변환
//	    2) listCount / boardLimit
//	    3) 결과 값에 올림 처리 => Math.ceil();
//	    4) 결과 값을 int 형으로 형변환
	    maxPage = (int)Math.ceil((double)listCount / boardLimit);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		doGet(request, response);
	}

}
